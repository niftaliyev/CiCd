name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v4

    # Set up Docker
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Build the Docker image
    - name: Build Docker image
      run: |
        docker build -t my-image-name:${{ github.sha }} .

    # Save the Docker image to a tar file
    - name: Save Docker image as tar file
      run: |
        mkdir -p $GITHUB_WORKSPACE/docker-images  # Create directory if it doesn't exist
        chmod -R 777 ./docker-images
        docker save my-image-name:${{ github.sha }} -o $GITHUB_WORKSPACE/docker-images/my-image-name.tar
        

    # List directory contents for debugging
    - name: List directory contents
      run: |
        ls -l ./docker-images

    # Upload tar file to server using SCP
    - name: Upload Docker image to server
      uses: appleboy/scp-action@v0.1.5
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        source: ./docker-images/my-image-name.tar
        target: /home/${{ secrets.SERVER_USER }}/docker-images/my-image-name.tar
        port: 22

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # SSH into the server and load the Docker image
    - name: Deploy Docker image on server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: 22
        script: |
          # Make sure the target directory exists
          mkdir -p /home/${{ secrets.USERNAME }}/docker-images

          # Load the Docker image from the tar file
          docker load -i /home/${{ secrets.USERNAME }}/docker-images/my-image-name.tar

          # Run the Docker container (adjust the command according to your needs)
          docker run -d --name my-container-name my-image-name:${{ github.sha }}
